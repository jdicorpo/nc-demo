$date
	Thu Aug 14 17:07:51 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module alu_16bit_tb $end
$var wire 1 ! zero $end
$var wire 16 " result [15:0] $end
$var wire 1 # overflow $end
$var reg 16 $ a [15:0] $end
$var reg 4 % alu_control [3:0] $end
$var reg 16 & b [15:0] $end
$var integer 32 ' fail_count [31:0] $end
$var integer 32 ( pass_count [31:0] $end
$var integer 32 ) test_count [31:0] $end
$scope module dut $end
$var wire 16 * a [15:0] $end
$var wire 4 + alu_control [3:0] $end
$var wire 16 , b [15:0] $end
$var wire 1 # overflow $end
$var wire 16 - result [15:0] $end
$var wire 1 ! zero $end
$var reg 1 . alu_overflow $end
$var reg 16 / alu_result [15:0] $end
$upscope $end
$scope task check_result $end
$var reg 1 0 expected_overflow $end
$var reg 16 1 expected_result [15:0] $end
$var reg 1 2 expected_zero $end
$var reg 256 3 test_name [255:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx 3
x2
bx 1
x0
bx /
x.
bx -
bx ,
bx +
bx *
b0 )
b0 (
b0 '
bx &
bx %
bx $
x#
bx "
x!
$end
#10
0!
b110100010101100 "
b110100010101100 -
b110100010101100 /
0#
0.
b0 %
b0 +
b101011001111000 &
b101011001111000 ,
b1001000110100 $
b1001000110100 *
#20
1!
b0 "
b0 -
b0 /
b0 &
b0 ,
b0 $
b0 *
b1 (
b1 )
b100000101000100010001000010000001110000011011110111001101101001011101000110100101110110011001010010000001101110011101010110110101100010011001010111001001110011 3
00
02
b110100010101100 1
#30
1#
1.
0!
b1000000000000000 "
b1000000000000000 -
b1000000000000000 /
b1 &
b1 ,
b111111111111111 $
b111111111111111 *
b10 (
b10 )
b10000010100010001000100001000000111101001100101011100100110111100100000011100100110010101110011011101010110110001110100 3
12
b0 1
#40
b100010001000100 "
b100010001000100 -
b100010001000100 /
0#
0.
b1 %
b1 +
b1001000110100 &
b1001000110100 ,
b101011001111000 $
b101011001111000 *
b11 (
b11 )
b10000010100010001000100001000000110111101110110011001010111001001100110011011000110111101110111001000000111000001101111011100110110100101110100011010010111011001100101 3
10
02
b1000000000000000 1
#50
1!
b0 "
b0 -
b0 /
b1010101111001101 &
b1010101111001101 ,
b1010101111001101 $
b1010101111001101 *
b100 (
b100 )
b1010011010101010100001000100000011100000110111101110011011010010111010001101001011101100110010100100000011100100110010101110011011101010110110001110100 3
00
b100010001000100 1
#60
1#
1.
0!
b111111111111111 "
b111111111111111 -
b111111111111111 /
b1 &
b1 ,
b1000000000000000 $
b1000000000000000 *
b101 (
b101 )
b10100110101010101000010001000000111101001100101011100100110111100100000011100100110010101110011011101010110110001110100 3
12
b0 1
#70
b101010101010101 "
b101010101010101 -
b101010101010101 /
0#
0.
b10 %
b10 +
b101010101010101 &
b101010101010101 ,
b1111111111111111 $
b1111111111111111 *
b110 (
b110 )
b10100110101010101000010001000000110111101110110011001010111001001100110011011000110111101110111 3
10
02
b111111111111111 1
#80
b1111111111111111 "
b1111111111111111 -
b1111111111111111 /
b11 %
b11 +
b1010101010101010 &
b1010101010101010 ,
b101010101010101 $
b101010101010101 *
b111 (
b111 )
b1000001010011100100010000100000011011110111000001100101011100100110000101110100011010010110111101101110 3
00
b101010101010101 1
#90
1!
b0 "
b0 -
b0 /
b100 %
b100 +
b1001000110100 &
b1001000110100 ,
b1001000110100 $
b1001000110100 *
b1000 (
b1000 )
b10011110101001000100000011011110111000001100101011100100110000101110100011010010110111101101110 3
b1111111111111111 1
#100
0!
b1010101010101010 "
b1010101010101010 -
b1010101010101010 /
b101010101010101 &
b101010101010101 ,
b1111111111111111 $
b1111111111111111 *
b1001 (
b1001 )
b10110000100111101010010001000000111101001100101011100100110111100100000011100100110010101110011011101010110110001110100 3
12
b0 1
#110
b1 "
b1 -
b1 /
b101 %
b101 +
b1 &
b1 ,
b1010 (
b1010 )
b101100001001111010100100010000001100100011010010110011001100110011001010111001001100101011011100111010000100000011101100110000101101100011101010110010101110011 3
02
b1010101010101010 1
#120
1!
b0 "
b0 -
b0 /
b10 $
b10 *
b1011 (
b1011 )
b10100110100110001010100001000000100000100100000001111000010000001000010001000000010100001110011011010010110011101101110011001010110010000101001 3
b1 1
#130
0!
b111111111111111 "
b111111111111111 -
b111111111111111 /
b0 %
b0 +
b0 &
b0 ,
b111111111111111 $
b111111111111111 *
b1100 (
b1100 )
b1010011010011000101010000100000010000010010000000111110001111010010000001000010001000000010100001110011011010010110011101101110011001010110010000101001 3
12
b0 1
#140
b1000000000000000 "
b1000000000000000 -
b1000000000000000 /
b1000000000000000 $
b1000000000000000 *
b1101 (
b1101 )
b100000101000100010001000010000001101101011000010111100000100000011100000110111101110011011010010111010001101001011101100110010100100000001010110010000001111010011001010111001001101111 3
02
b111111111111111 1
#150
b1110 (
b1110 )
b100000101000100010001000010000001101101011000010111100000100000011011100110010101100111011000010111010001101001011101100110010100100000001010110010000001111010011001010111001001101111 3
b1000000000000000 1
#160
